#!/bin/bash

# There are no 'data types' in bash. Any variables made of only numbers can do arithmetic.
# Size uses the metric system (1000 bytes to a KB etc)

Numbers=('0' '1' '2' '3' '4' '5' '6' '7' '8' '9' '10' '11' '12')
Scheme=('Name' 'Rack position' 'Brand' 'Serial number' 'Size' 'Model' 'Revolutions per minute' 'Data interface' 'Power draw' 'Purpose' 'Format' 'Scheme' 'Debug port')
HardDrive0=('Hard Drive 0' '' 'Western Digital' '' '' '' '' '' '' '' '' '' '')
HardDrive1=('Hard Drive 1' '' 'Toshiba' '' '' '' '' '' '' '' '' '' '')
HardDrive2=('Hard Drive 2' '' 'Western Digital' '' '' '' '' '' '' '' '' '' '')
HardDrive3=('Hard Drive 3' '' 'Western Digital' '' '' '' '' '' '' '' '' '' '')
HardDrive4=('Hard Drive 4' '' 'Western Digital' '' '' '' '' '' '' '' '' '' '')
HardDrive5=('Hard Drive 5' '' 'Western Digital' '' '' '' '' '' '' '' '' '' '')
HardDrive6=('Hard Drive 6' '' 'Western Digital' '' '' '' '' '' '' '' '' '' '')

HardDrives=(${Scheme[@]} ${HardDrive0[@]} ${HardDrive1[@]} ${HardDrive2[@]} ${HardDrive3[@]} ${HardDrive4[@]} ${HardDrive5[@]} ${HardDrive6[@]})

# When calling any variable the {} are used to isolate the varable to ensure correct syntax.
# The [@] is used to index all the elements of an array.
# I belive the reason that the double quotes (") are required when calling the array in the for loop is because every time the array is indexed the quotation 
marks encapsulate$
# Semicolons (;) can be used to make lines of code more dense they are treated as 'new lines' and therefore new commands
# Done closes all loops in bash

for element in "${Numbers[@]}"
do
        echo "${Scheme[element]}: ${HardDrive0[element]}"
done
